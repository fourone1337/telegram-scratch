require("dotenv").config();
const express = require("express");
const cors = require("cors");
const fetch = require("node-fetch");
const { createClient } = require("@supabase/supabase-js");

const app = express();
app.use(cors());
app.use(express.json());

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

/*// üèÜ –ó–∞–ø–∏—Å—å –≤—ã–∏–≥—Ä—ã—à–∞
app.post("/api/wins", async (req, res) => {
  const { address, emojis, reward, date } = req.body;
  const result = await supabase
    .from("wins")
    .insert([{ address, emojis, reward, date }]);

  if (result.error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ wins:", result.error.message);
    return res.status(500).json({ error: result.error.message });
  }

  res.json({ success: true });
});
*/
// üí∞ –†—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ TON)
/*app.post("/api/topup", async (req, res) => {
  const { address, amount } = req.body;

  const { data, error } = await supabase.rpc("increment_balance", {
    user_address: address,
    add_amount: parseFloat(amount)
  });

  if (error) {
    console.error("–û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", error.message);
    return res.status(500).json({ error: error.message });
  }

  res.json({ balance: data });
});
*/
// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ TON-–ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
app.get("/api/verify-topup/:address/:amount", async (req, res) => {
  const { address, amount } = req.params;
  const RECEIVER_ADDRESS = "UQDYpGx-Y95M0F-ETSXFwC6YeuJY31qaqetPlkmYDEcKyX8g";
  const TONAPI_KEY = process.env.TONAPI_KEY;

  try {
    const response = await fetch(
      `https://tonapi.io/v2/blockchain/accounts/${RECEIVER_ADDRESS}/transactions?limit=20`,
      {
        headers: { Authorization: `Bearer ${TONAPI_KEY}` }
      }
    );

    const txs = await response.json();
    const nanoAmount = BigInt(Math.floor(parseFloat(amount) * 1e9));

    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç:", address);
    console.log("–ò—Å–∫–æ–º–∞—è —Å—É–º–º–∞:", nanoAmount.toString(), "–Ω–∞–Ω–æTON");

    const found = txs.transactions.find(tx =>
      tx.incoming &&
      tx.incoming.source === address &&
      BigInt(tx.incoming.value) >= nanoAmount
    );

    if (!found) {
      console.log("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è", address);
      return res.json({ confirmed: false });
    }

    console.log("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–π–¥–µ–Ω! –ó–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å...");

    const { data, error } = await supabase.rpc("increment_balance", {
      user_address: address,
      add_amount: parseFloat(amount)
    });

    console.log("üì§ increment_balance –≤—ã–∑–æ–≤:", {
      user_address: address,
      add_amount: parseFloat(amount),
      error
    });

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏:", error.message);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞" });
    }

    return res.json({ confirmed: true });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TON:", err);
    return res.status(500).json({ error: "–ü—Ä–æ–≤–µ—Ä–∫–∞ TON –Ω–µ —É–¥–∞–ª–∞—Å—å" });
  }
});

// üßæ –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å (–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ—Ç)
app.get("/api/balance/:address", async (req, res) => {
  const { address } = req.params;

  // auto-upsert –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { error: upsertError } = await supabase
    .from("users")
    .upsert({ address, balance: 0 }, { onConflict: ["address"] });

  if (upsertError) {
    console.error("–û—à–∏–±–∫–∞ upsert:", upsertError.message);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
  }

  const { data, error } = await supabase
    .from("users")
    .select("balance")
    .eq("address", address)
    .single();

  if (error || !data) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", error?.message);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞" });
  }

  res.json({ balance: data.balance });
});

// üí∏ –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
app.post("/api/spend", async (req, res) => {
  const { address, amount } = req.body;

  const { data, error: selectError } = await supabase
    .from("users")
    .select("balance")
    .eq("address", address)
    .single();

  if (selectError || !data) {
    return res.status(404).json({ error: "–ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω." });
  }

  if (data.balance < amount) {
    return res.status(400).json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤." });
  }

  const { error: updateError } = await supabase
    .from("users")
    .update({
      balance: data.balance - amount,
      updated_at: new Date().toISOString()
    })
    .eq("address", address);

  if (updateError) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏:", updateError.message);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏." });
  }

  res.json({ success: true });
});

// ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
