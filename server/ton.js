// server/ton.js
const TonWeb = require('tonweb');
const bip39  = require('bip39');                // —É–∂–µ –µ—Å—Ç—å –≤ package.json
require('dotenv').config();

const { TONCENTER_API_KEY, SECRET_KEY } = process.env;
if (!SECRET_KEY) throw new Error('‚ùå SECRET_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env');

const provider = new TonWeb.HttpProvider(
  'https://toncenter.com/api/v2/jsonRPC',
  { apiKey: TONCENTER_API_KEY }
);
const tonweb = new TonWeb(provider);

/* ---------- 1. –ü–æ–ª—É—á–∞–µ–º seed (32 –±–∞–π—Ç–∞) ---------- */
let seedBytes;

// A) –≤ .env –ª–µ–∂–∏—Ç 24-—Å–ª–æ–≤–Ω–∞—è –º–Ω–µ–º–æ–Ω–∏–∫–∞
if (SECRET_KEY.trim().split(/\s+/).length >= 12) {
  if (!bip39.validateMnemonic(SECRET_KEY.trim()))
    throw new Error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞');
  const fullSeed = bip39.mnemonicToSeedSync(SECRET_KEY.trim()); // 64 –±–∞–π—Ç–∞ Buffer
  seedBytes = Uint8Array.from(fullSeed.slice(0, 32));           // –ø–µ—Ä–≤—ã–µ 32
  console.log('üîë seed –ø–æ–ª—É—á–µ–Ω –∏–∑ –º–Ω–µ–º–æ–Ω–∏–∫–∏');
}
// B) –≤ .env –ª–µ–∂–∏—Ç base64-seed (32 –±–∞–π—Ç–∞)
else {
  seedBytes = Uint8Array.from(Buffer.from(SECRET_KEY, 'base64'));
  console.log('üîë seed –ø–æ–ª—É—á–µ–Ω –∏–∑ base64');
}

/* ---------- 2. –ö–ª—é—á–∏ –∏ –∫–æ—à–µ–ª—ë–∫ v4R2 ---------- */
const keyPair = TonWeb.utils.keyPairFromSeed(seedBytes);
const secretKeyUint8 = new Uint8Array(keyPair.secretKey);       // –≥–∞—Ä–∞–Ω—Ç–∏—è Uint8Array

const wallet = tonweb.wallet.create({
  publicKey : new Uint8Array(keyPair.publicKey),                // —Ç–æ–∂–µ Uint8Array
  wc        : 0,
  type      : 'v4R2'
});
/* --------------------------------------------- */

async function deployWalletIfNeeded() {
  const addr = await wallet.getAddress();
  const info = await provider.getAddressInfo(addr.toString());

  if (info?.state === 'active') return;

  console.log('üì¶ –ö–æ—à–µ–ª—ë–∫ –Ω–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç ‚Äî –¥–µ–ø–ª–æ–∏–º‚Ä¶');
  await wallet.deploy({ secretKey: secretKeyUint8 }).send();
  console.log('‚úÖ –ö–æ—à–µ–ª—ë–∫ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç.');
}

async function sendTonReward(toAddressStr, amountTon) {
  await deployWalletIfNeeded();

  let seqno = 0;
  try { seqno = await wallet.methods.seqno().call(); } catch {}

  const amountNano = TonWeb.utils.toNano(amountTon.toString());
  const toAddress  = new TonWeb.Address(toAddressStr);

  console.log(`üöÄ –ü–µ—Ä–µ–≤–æ–¥ ${amountTon} TON –Ω–∞ ${toAddressStr}`);

  await wallet.methods.transfer({
    secretKey : secretKeyUint8,   // <-- —Ç–µ–ø–µ—Ä—å Uint8Array
    toAddress,
    amount    : amountNano,
    seqno,
    payload   : null,
    bounce    : false,
    sendMode  : 3
  }).send();

  console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
}

module.exports = { sendTonReward };
