const TonWeb = require("tonweb");

const TONCENTER_API_KEY = process.env.TONCENTER_API_KEY;
const SECRET_KEY = process.env.SECRET_KEY;

if (!SECRET_KEY) {
  throw new Error("‚ùå SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.");
}

const tonweb = new TonWeb(new TonWeb.HttpProvider("https://toncenter.com/api/v2/jsonRPC", {
  apiKey: TONCENTER_API_KEY
}));

const keyBytes = Buffer.from(SECRET_KEY, 'base64');
const keyPair = TonWeb.utils.keyPairFromSeed(keyBytes);

const WalletClass = tonweb.wallet.all['v4R2'];
const wallet = new WalletClass(tonweb.provider, {
  publicKey: keyPair.publicKey,
  wc: 0
});

// –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç –ª–∏ –∫–æ—à–µ–ª—ë–∫
async function deployWalletIfNeeded() {
  const address = await wallet.getAddress();
  const info = await tonweb.provider.getAddressInfo(address.toString());

  const isDeployed = info && info.state === 'active';

  if (!isDeployed) {
    console.log("üì¶ –ö–æ—à–µ–ª—ë–∫ –Ω–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç. –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º...");
    await wallet.deploy(keyPair.secretKey).send();
    console.log("‚úÖ –ö–æ—à–µ–ª—ë–∫ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç.");
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ TON
async function sendTonReward(toAddress, amountTon) {
  await deployWalletIfNeeded();

  const seqno = await wallet.methods.seqno().call();
  const amountNano = TonWeb.utils.toNano(amountTon.toString());

  console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${amountTon} TON (${amountNano} nanoTON) –Ω–∞ ${toAddress}...`);

  await wallet.methods.transfer({
    secretKey: keyPair.secretKey,
    toAddress,
    amount: amountNano,
    seqno,
    payload: null,
    sendMode: 3
  }).send();

  console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
}

module.exports = { sendTonReward };
