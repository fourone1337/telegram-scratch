const TonWeb = require('tonweb');
require('dotenv').config();

const { TONCENTER_API_KEY, SECRET_KEY } = process.env;
if (!SECRET_KEY) throw new Error('‚ùå SECRET_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env');

const provider = new TonWeb.HttpProvider(
  'https://toncenter.com/api/v2/jsonRPC',
  { apiKey: TONCENTER_API_KEY }
);
const tonweb = new TonWeb(provider);

// ---------- –∫–ª—é—á–∏ –∏ –∫–æ—à–µ–ª—ë–∫ v4R2 ----------
const seedBytes = Uint8Array.from(Buffer.from(SECRET_KEY, 'base64'));  // <-- Uint8Array
const keyPair   = TonWeb.utils.keyPairFromSeed(seedBytes);

const wallet = tonweb.wallet.create({
  publicKey : keyPair.publicKey,
  wc        : 0,
  type      : 'v4R2'
});
// ------------------------------------------

async function deployWalletIfNeeded() {
  const addr = await wallet.getAddress();
  const info = await provider.getAddressInfo(addr.toString());

  if (info?.state === 'active') return;

  console.log('üì¶ –ö–æ—à–µ–ª—ë–∫ –Ω–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç ‚Äî –¥–µ–ø–ª–æ–∏–º‚Ä¶');
  await wallet.deploy({ secretKey: keyPair.secretKey }).send();
  console.log('‚úÖ –ö–æ—à–µ–ª—ë–∫ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç.');
}

async function sendTonReward(toAddressStr, amountTon) {
  await deployWalletIfNeeded();

  let seqno = 0;
  try { seqno = await wallet.methods.seqno().call(); } catch {}

  const amountNano = TonWeb.utils.toNano(amountTon.toString());
  const toAddress  = new TonWeb.Address(toAddressStr);     // <-- –æ–±—ä–µ–∫—Ç, –Ω–µ —Å—Ç—Ä–æ–∫–∞

  console.log(`üöÄ –ü–µ—Ä–µ–≤–æ–¥ ${amountTon} TON –Ω–∞ ${toAddressStr}`);

  await wallet.methods.transfer({
    secretKey : keyPair.secretKey,        // Uint8Array
    toAddress,
    amount    : amountNano,
    seqno,
    payload   : null,
    bounce    : false,
    sendMode  : 3
  }).send();

  console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
}

module.exports = { sendTonReward };
