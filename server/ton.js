const TonWeb = require("tonweb");
const nacl = require("tweetnacl");

const TONCENTER_API_KEY = process.env.TONCENTER_API_KEY;
const SECRET_KEY = process.env.SECRET_KEY;

if (!SECRET_KEY) {
  throw new Error("‚ùå SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env");
}

const tonweb = new TonWeb(new TonWeb.HttpProvider("https://toncenter.com/api/v2/jsonRPC", {
  apiKey: TONCENTER_API_KEY
}));

// üîê seed (32 –±–∞–π—Ç–∞)
const seed = Uint8Array.from(Buffer.from(SECRET_KEY, 'base64'));

// ‚úÖ –ø–æ–ª—É—á–∞–µ–º keyPair —Å secretKey –¥–ª–∏–Ω–æ–π 64 –±–∞–π—Ç–∞
const keyPair = nacl.sign.keyPair.fromSeed(seed);

const WalletClass = tonweb.wallet.all['v4R2'];
const wallet = new WalletClass(tonweb.provider, {
  publicKey: keyPair.publicKey,
  wc: 0
});

async function sendTonReward(toAddress, amountTon) {
  console.log("‚úÖ sendTonReward –∑–∞–≥—Ä—É–∂–µ–Ω");

  const address = await wallet.getAddress();
  const walletInfo = await tonweb.provider.getAddressInfo(address.toString());

  if (walletInfo.state !== 'active') {
    console.log("üì¶ –ö–æ—à–µ–ª—ë–∫ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã–ø–æ–ª–Ω—è–µ–º deploy...");

    await wallet.deploy({ secretKey: keyPair.secretKey }).send();

    for (let i = 0; i < 10; i++) {
      await new Promise(res => setTimeout(res, 3000));
      const info = await tonweb.provider.getAddressInfo(address.toString());
      if (info.state === 'active') {
        console.log("‚úÖ –ö–æ—à–µ–ª—ë–∫ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.");
        break;
      }
      if (i === 9) throw new Error("‚ùå –ö–æ—à–µ–ª—ë–∫ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ—Å–ª–µ deploy.");
    }
  }

  const seqno = await wallet.methods.seqno().call();
  const amountNano = TonWeb.utils.toNano(amountTon.toString());

  console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${amountTon} TON –Ω–∞ ${toAddress}...`);

  await wallet.methods.transfer({
    secretKey: keyPair.secretKey, // ‚úÖ —Ç–µ–ø–µ—Ä—å 64 –±–∞–π—Ç–∞ Uint8Array
    toAddress,
    amount: amountNano,
    seqno,
    payload: null,
    sendMode: 3
  }).send();

  console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
}

module.exports = { sendTonReward };
