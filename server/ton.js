const TonWeb = require("tonweb");
const bip39 = require("bip39");

const TONCENTER_API_KEY = process.env.TONCENTER_API_KEY;
const FROM_WALLET = process.env.FROM_WALLET;
const SECRET_KEY = process.env.SECRET_KEY;

if (!SECRET_KEY) {
  throw new Error("‚ùå SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç SECRET_KEY=...");
}

const tonweb = new TonWeb(new TonWeb.HttpProvider("https://toncenter.com/api/v2/jsonRPC", {
  apiKey: TONCENTER_API_KEY
}));

const keyBytes = Buffer.from(SECRET_KEY, 'base64'); // 32 –±–∞–π—Ç–∞ seed
const keyPair = TonWeb.utils.keyPairFromSeed(keyBytes);

const WalletClass = tonweb.wallet.all['v4R2']; // TON Space –∏—Å–ø–æ–ª—å–∑—É–µ—Ç v4R2
const wallet = new WalletClass(tonweb.provider, {
  publicKey: keyPair.publicKey,
  wc: 0
});

let isWalletOpened = false;

async function sendTonReward(toAddress, amountTon) {
  if (!isWalletOpened) {
    await wallet.open();
    isWalletOpened = true;
  }

  const address = await wallet.getAddress();
  const walletInfo = await tonweb.provider.getAddressInfo(address.toString());

  // Deploy –∫–æ—à–µ–ª—å–∫–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
  if (walletInfo.state !== 'active') {
    console.log("üì¶ –ö–æ—à–µ–ª—ë–∫ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã–ø–æ–ª–Ω—è–µ–º deploy...");

    await wallet.deploy({ secretKey: keyPair.secretKey }).send();

    // –ñ–¥—ë–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–¥–æ 10 –ø–æ–ø—ã—Ç–æ–∫, –ø–æ 3 —Å–µ–∫—É–Ω–¥—ã)
    for (let i = 0; i < 10; i++) {
      await new Promise(res => setTimeout(res, 3000));
      const info = await tonweb.provider.getAddressInfo(address.toString());
      if (info.state === 'active') {
        console.log("‚úÖ –ö–æ—à–µ–ª—ë–∫ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.");
        break;
      }
      if (i === 9) throw new Error("‚ùå –ö–æ—à–µ–ª—ë–∫ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ—Å–ª–µ deploy.");
    }
  }

  const seqno = await wallet.methods.seqno().call();
  const amountNano = TonWeb.utils.toNano(amountTon.toString());

  console.log(`\nüöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${amountTon} TON (${amountNano} nanoTON) –Ω–∞ ${toAddress}...`);

  await wallet.methods.transfer({
    secretKey: keyPair.secretKey,
    toAddress,
    amount: amountNano,
    seqno,
    payload: null,
    sendMode: 3
  }).send();

  console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
}

module.exports = { sendTonReward };
