const buyBtn = document.getElementById("buy");
const status = document.getElementById("status");
const walletDisplay = document.getElementById("wallet-address");
const SERVER_URL = "https://scratch-lottery.ru";

let currentWalletAddress = null;
let currentTicket = null;
let openedIndices = [];
const history = [];

// üîß –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è raw ‚Üí friendly
function toFriendly(addrRaw) {
  try {
    return toncore.Address.parseRaw(addrRaw).toString({ bounceable: true });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞:", e);
    return addrRaw;
  }
}

// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TonConnect
const tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
  manifestUrl: 'https://telegram-scratch-two.vercel.app/tonconnect-manifest.json',
  buttonRootId: 'ton-connect'
});

tonConnectUI.onStatusChange(wallet => {
  const rawAddress = wallet?.account?.address || "";
  currentWalletAddress = rawAddress || null;

  const friendly = rawAddress ? toFriendly(rawAddress) : "";
  const shortAddress = friendly
    ? `${friendly.slice(0, 4)}...${friendly.slice(-3)}`
    : "üî¥ –ö–æ—à–µ–ª—ë–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω.";

  walletDisplay.textContent = friendly
    ? `üü¢ –ö–æ—à–µ–ª—ë–∫: ${shortAddress}`
    : shortAddress;

  buyBtn.disabled = !friendly;
  document.getElementById("topup").disabled = !friendly;

  status.textContent = friendly
    ? "–ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!"
    : "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.";

  if (friendly) {
    console.log("üß™ Friendly –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞:", friendly);
    fetchBalance(friendly);
  }
});

// ‚úÖ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç
buyBtn.onclick = async () => {
  if (!currentWalletAddress) {
    alert("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫.");
    return;
  }
  try {
    buyBtn.disabled = true;
    status.textContent = "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...";
    await spendBalance(toFriendly(currentWalletAddress), 0.05);
    currentTicket = generateTicket();
    openedIndices = [];
    status.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ 3 —è—á–µ–π–∫–∏";
    renderTicket(currentTicket);
    await fetchBalance(toFriendly(currentWalletAddress));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:", err);
    alert(`–û—à–∏–±–∫–∞: ${err.message}`);
    status.textContent = "‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.";
  } finally {
    buyBtn.disabled = false;
  }
};

// ‚úÖ –ü–æ–ø–æ–ª–Ω–∏—Ç—å
document.getElementById("topup").onclick = async () => {
  if (!currentWalletAddress) {
    alert("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫.");
    return;
  }
  const input = prompt("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É TON:");
  const amount = parseFloat(input);
  if (isNaN(amount) || amount <= 0) {
    alert("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞");
    return;
  }
  try {
    status.textContent = "‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...";
    await tonConnectUI.sendTransaction({
      validUntil: Math.floor(Date.now() / 1000) + 300,
      messages: [
        {
          address: "UQDYpGx-Y95M0F-ETSXFwC6YeuJY31qaqetPlkmYDEcKyX8g",
          amount: (amount * 1e9).toString()
        }
      ]
    });
    await verifyTopup(toFriendly(currentWalletAddress), amount);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏:", err);
    status.textContent = "‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å";
  }
};

// ‚úÖ –í—ã–≤–µ—Å—Ç–∏
document.getElementById("withdraw").onclick = async () => {
  try {
    const wallet = await tonConnectUI.wallet;
    if (!wallet || !wallet.account || !wallet.account.address) {
      return alert("‚ùå –ö–æ—à–µ–ª—ë–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω");
    }
    const friendly = toFriendly(wallet.account.address);
    const input = prompt("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:");
    const amount = parseFloat(input);
    if (isNaN(amount) || amount <= 0) {
      alert("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞");
      return;
    }
    const res = await fetch(`${SERVER_URL}/api/request-withdraw`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ address: friendly, amount })
    });
    const data = await res.json();
    if (data.success) alert("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞");
    else alert("‚ùå –û—à–∏–±–∫–∞: " + data.error);
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ:", e);
  }
};

// ‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
async function fetchBalance(address) {
  try {
    const res = await fetch(`${SERVER_URL}/api/balance/${address}`);
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || "–û—à–∏–±–∫–∞");
    document.getElementById("balance-display").textContent =
      `üí∞ –ë–∞–ª–∞–Ω—Å: ${data.balance.toFixed(2)} TON`;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞:", err);
    document.getElementById("balance-display").textContent = "üí∞ –ë–∞–ª–∞–Ω—Å: –æ—à–∏–±–∫–∞";
  }
}

async function spendBalance(address, amount) {
  const res = await fetch(`${SERVER_URL}/api/spend`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ address, amount })
  });
  const data = await res.json();
  if (!res.ok) throw new Error(data.error || "–û—à–∏–±–∫–∞");
  return data;
}

async function verifyTopup(address, amount) {
  status.textContent = "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥...";
  const res = await fetch(`${SERVER_URL}/api/verify-topup/${address}/${amount}`);
  const data = await res.json();
  if (data.confirmed) {
    await fetchBalance(address);
    status.textContent = `‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ${amount} TON`;
  } else {
    status.textContent = "‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.";
  }
}

// üéü –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (generateTicket, renderTicket, renderHistory) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π


function generateTicket() {
  return Array.from({ length: 6 }, () => emojis[Math.floor(Math.random() * emojis.length)]);
}

function renderTicket(ticket) {
  const containerId = "ticket-container";
  let container = document.getElementById(containerId);

  if (!container) {
    container = document.createElement("div");
    container.id = containerId;
    container.style.display = "grid";
    container.style.gridTemplateColumns = "repeat(3, 60px)";
    container.style.gridTemplateRows = "repeat(2, 60px)";
    container.style.gridGap = "10px";
    container.style.justifyContent = "center";
    container.style.margin = "20px 0";
    document.body.insertBefore(container, status);
  }
  container.innerHTML = "";

  ticket.forEach((emoji, idx) => {
    const cell = document.createElement("div");
    cell.style.width = "60px";
    cell.style.height = "60px";
    cell.style.backgroundColor = "rgba(136, 136, 136, 0.1)";
    cell.style.borderRadius = "8px";
    cell.style.display = "flex";
    cell.style.alignItems = "center";
    cell.style.justifyContent = "center";
    cell.style.fontSize = "36px";
    cell.style.cursor = "pointer";
    cell.style.userSelect = "none";
    cell.textContent = openedIndices.includes(idx) ? emoji : "‚ùì";

    cell.onclick = () => {
      if (openedIndices.length >= 3 || openedIndices.includes(idx)) return;
      openedIndices.push(idx);
      cell.textContent = emoji;
      if (openedIndices.length === 3) checkWin(ticket);
    };

    container.appendChild(cell);
  });
}

function checkWin(ticket) {
  const openedEmojis = openedIndices.map(i => ticket[i]);
  const allSame = openedEmojis.every(e => e === openedEmojis[0]);

  if (allSame) {
    const symbol = openedEmojis[0];
    const reward = emojiRewards[symbol] || 0;
    status.textContent = `üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${reward} TON –∑–∞ ${symbol}!`;

    if (currentWalletAddress) {
      sendWinToServer(currentWalletAddress, openedEmojis.join(""), reward);
      fetchWinners();
    }
  } else {
    status.textContent = "üòû –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë.";
  }

  openedIndices = ticket.map((_, i) => i);
  renderTicket(ticket);

  history.push({ ticket, opened: [...openedIndices], winner: allSame, openedEmojis });
  renderHistory();
}

function renderHistory() {
  let historyDiv = document.getElementById("history");
  if (!historyDiv) {
    historyDiv = document.createElement("div");
    historyDiv.id = "history";
    historyDiv.style.marginTop = "30px";
    historyDiv.style.textAlign = "left";
    document.body.appendChild(historyDiv);
  }

  if (history.length === 0) {
    historyDiv.innerHTML = "<b>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</b>";
    return;
  }

  const listItems = history.map((h, idx) => {
    const statusText = h.winner ? "–í—ã–∏–≥—Ä—ã—à" : "–ü—Ä–æ–∏–≥—Ä—ã—à";
    const color = h.winner ? "green" : "red";
    const openedStr = h.openedEmojis.join(", ");
    return `<div style="color:${color}; margin-bottom:6px;">
      <b>–ò–≥—Ä–∞ #${idx + 1}:</b> ${statusText} ‚Äî –û—Ç–∫—Ä—ã—Ç—ã–µ: ${openedStr}
    </div>`;
  });

  historyDiv.innerHTML = "<h3>–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä</h3>" + listItems.join("");
}

/*async function sendWinToServer(address, emojis, reward) {
  try {
    await fetch(`${SERVER_URL}/api/wins`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ address, emojis, reward, date: new Date().toISOString() })
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–±–µ–¥—ã:", err);
  }
}

async function fetchWinners() {
  try {
    const res = await fetch(`${SERVER_URL}/api/wins`);
    const data = await res.json();
    renderWinners(data);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:", err);
  }
}

function renderWinners(data) {
  let winnersDiv = document.getElementById("winners");
  if (!winnersDiv) {
    winnersDiv = document.createElement("div");
    winnersDiv.id = "winners";
    winnersDiv.style.marginTop = "40px";
    winnersDiv.innerHTML = "<h3>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏</h3>";
    document.body.appendChild(winnersDiv);
  }

  if (!data.length) {
    winnersDiv.innerHTML += "<div>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</div>";
    return;
  }

  const list = data.map(win => {
    const shortAddr = `${win.address.slice(0, 4)}...${win.address.slice(-3)}`;
    const rewardInfo = win.reward ? ` ‚Äî üí∞ ${win.reward} TON` : "";
    return `<div>üéâ ${shortAddr} ‚Äî ${win.emojis}${rewardInfo} (${new Date(win.date).toLocaleString()})</div>`;
  });

  winnersDiv.innerHTML = "<h3>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏</h3>" + list.join("");
}

fetchWinners();
*/