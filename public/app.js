// === –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã ===
const buyBtn = document.getElementById("buy");
const status = document.getElementById("status");
const walletDisplay = document.getElementById("wallet-address");
const SERVER_URL = "https://scratch-lottery.ru";

// üéüÔ∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –±–∏–ª–µ—Ç–∞
const ticketModal = document.getElementById("ticket-modal");
const closeTicketBtn = document.getElementById("close-ticket");
const buyAgainBtn = document.getElementById("buy-again");

const emojis = ["üçí", "‚≠êÔ∏è", "üçã", "üîî", "7Ô∏è‚É£", "üíé"];
const emojiRewards = {
  "üçí": 0.15,
  "‚≠êÔ∏è": 0.25,
  "üçã": 0.15,
  "üîî": 0.1,
  "7Ô∏è‚É£": 0.1,
  "üíé": 0.4
};

let currentWalletAddress = null;
let currentTicket = null;
let openedIndices = [];
const history = [];

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ===
function updateBalanceText(balance, isError = false) {
  const el = document.getElementById("balance-text");
  el.textContent = isError ? "–û—à–∏–±–∫–∞" : `${balance.toFixed(2)} TON`;
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TonConnect ===
const tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
  manifestUrl: 'https://telegram-scratch-two.vercel.app/tonconnect-manifest.json',
  buttonRootId: 'ton-connect'
});

tonConnectUI.onStatusChange(wallet => {
  const raw = wallet?.account?.address || "";
  let friendly = null;
  if (raw) {
    try {
      friendly = new TonWeb.utils.Address(raw).toString(true, true, true);
    } catch {
      try {
        friendly = new TonWeb.utils.Address(raw).toString(true, false, true);
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞:", e);
      }
    }
  }

  const enabled = !!friendly;
  buyBtn.disabled = !enabled;       // ‚úÖ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º 6-—Å–ª–æ—Ç–æ–≤—É—é
  buyBtn9.disabled = !enabled;   // ‚úÖ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º 9-—Å–ª–æ—Ç–æ–≤—É—é
  document.getElementById("topup").disabled = !enabled;
  document.getElementById("withdraw").disabled = !enabled;

  currentWalletAddress = friendly || null;
  status.textContent = enabled
    ? "–ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!"
    : "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.";

  if (friendly) fetchBalance(friendly);
});

// === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞ ===
async function buyTicket() {
  if (!currentWalletAddress) {
    alert("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫!");
    return;
  }
  try {
    status.textContent = "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...";
    buyBtn.disabled = true;
    buyAgainBtn.disabled = true;

    // —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞
    await spendBalance(currentWalletAddress, 0.025);

    // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Ä–µ–Ω–¥–µ—Ä
    currentTicket = generateTicket();
    openedIndices = [];
    status.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ 3 —è—á–µ–π–∫–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å";
    renderTicket(currentTicket);

    // –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
    ticketModal.style.display = "block";

    // –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    await fetchBalance(currentWalletAddress);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:", err);
    alert(`–û—à–∏–±–∫–∞: ${err.message}`);
    status.textContent = "‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.";
  } finally {
    buyBtn.disabled = false;
    buyAgainBtn.disabled = false;
  }
}

// === –ö–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ ===
buyBtn.onclick = buyTicket;
buyAgainBtn.onclick = buyTicket;

// === –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –±–∏–ª–µ—Ç–∞ ===
closeTicketBtn.onclick = () => ticketModal.style.display = "none";
window.onclick = (e) => {
  if (e.target === ticketModal) ticketModal.style.display = "none";
};

// === –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ TON ===
document.getElementById("topup").onclick = async () => {
  if (!currentWalletAddress) return alert("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ TON-–∫–æ—à–µ–ª—ë–∫");
  const input = prompt("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É TON –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:");
  const amount = parseFloat(input);
  if (isNaN(amount) || amount <= 0) return alert("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞");

  try {
    status.textContent = "‚è≥ –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥...";
    await tonConnectUI.sendTransaction({
      validUntil: Math.floor(Date.now() / 1000) + 300,
      messages: [{
        address: "UQDYpGx-Y95M0F-ETSXFwC6YeuJY31qaqetPlkmYDEcKyX8g",
        amount: (amount * 1e9).toString()
      }]
    });
    await verifyTopup(currentWalletAddress, amount);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", err);
    alert("‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å");
  }
};

// === –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ ===
document.getElementById("withdraw").onclick = async () => {
  if (!currentWalletAddress) return alert("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫");
  const input = prompt("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:");
  const amount = parseFloat(input);
  if (isNaN(amount) || amount <= 0) return alert("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞");

  try {
    const res = await fetch(`${SERVER_URL}/api/request-withdraw`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ address: currentWalletAddress, amount })
    });
    const data = await res.json();
    if (data.success) alert("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–∏–Ω—è—Ç–∞");
    else alert("‚ùå –û—à–∏–±–∫–∞: " + data.error);
  } catch (err) {
    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ: " + err.message);
  }
};

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ===
async function verifyTopup(address, amount) {
  status.textContent = "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞...";
  const res = await fetch(`${SERVER_URL}/api/verify-topup/${address}/${amount}`);
  const data = await res.json();
  if (data.confirmed) {
    await fetchBalance(address);
    status.textContent = `‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${amount} TON`;
  } else {
    status.textContent = "‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω";
  }
}

// === –ë–∞–ª–∞–Ω—Å ===
async function fetchBalance(address) {
  try {
    const res = await fetch(`${SERVER_URL}/api/balance/${address}`);
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞");
    updateBalanceText(data.balance);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞:", err);
    updateBalanceText(0, true);
  }
}

// === –°–ø–∏—Å–∞–Ω–∏–µ TON ===
async function spendBalance(address, amount) {
  const res = await fetch(`${SERVER_URL}/api/spend`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ address, amount })
  });
  const data = await res.json();
  if (!res.ok) throw new Error(data.error || "–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è");
  return data;
}

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–∏–ª–µ—Ç–∞ ===
function generateTicket() {
  return Array.from({ length: 6 }, () => emojis[Math.floor(Math.random() * emojis.length)]);
}

function renderTicket(ticket) {
  const container = document.getElementById("ticket-container");
  container.innerHTML = "";

  ticket.forEach((emoji, idx) => {
    const cell = document.createElement("div");
    cell.textContent = openedIndices.includes(idx) ? emoji : "‚ùì";
    if (openedIndices.includes(idx)) cell.classList.add("opened");

    cell.onclick = () => {
      if (openedIndices.length >= 3 || openedIndices.includes(idx)) return;
      openedIndices.push(idx);
      cell.textContent = emoji;
      cell.classList.add("selected", "opened");
      if (openedIndices.length === 3) checkWin(ticket);
    };
    container.appendChild(cell);
  });
}

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞ ===
function checkWin(ticket) {
  const openedEmojis = openedIndices.map(i => ticket[i]);
  const allSame = openedEmojis.every(e => e === openedEmojis[0]);

  if (allSame) {
    const symbol = openedEmojis[0];
    const reward = emojiRewards[symbol] || 0;
    status.textContent = `üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${reward} TON –∑–∞ ${symbol}!`;
    // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å sendWinToServer(...)
  } else {
    status.textContent = "üòû –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.";
  }

  const cells = document.querySelectorAll("#ticket-container div");
  ticket.forEach((emoji, i) => {
    if (!openedIndices.includes(i)) {
      cells[i].textContent = emoji;
      cells[i].classList.add("opened");
    }
  });
  openedIndices = ticket.map((_, i) => i);
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å–ª–æ–≤–∏–π
const modal = document.getElementById("terms-modal");
const closeBtn = document.getElementById("close-terms");
const acceptBtn = document.getElementById("accept-terms");
const termsText = document.getElementById("terms-text");

document.getElementById("disclaimer-button").addEventListener("click", async () => {
  try {
    const response = await fetch("terms.txt");
    const text = await response.text();
    termsText.textContent = text;
  } catch (err) {
    termsText.textContent = "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Å–ª–æ–≤–∏—è.";
  }
  modal.style.display = "block";
});

closeBtn.addEventListener("click", () => {
  modal.style.display = "none";
});

acceptBtn.addEventListener("click", () => {
  modal.style.display = "none";
});


// === 9-—Å–ª–æ—Ç–æ–≤—ã–π –±–∏–ª–µ—Ç ===
const buyBtn9 = document.getElementById("buy9");
const ticketModal9 = document.getElementById("ticket-modal-9");
const closeTicketBtn9 = document.getElementById("close-ticket-9");
const buyAgainBtn9 = document.getElementById("buy-again-9");

let currentTicket9 = null;
let openedIndices9 = [];

// –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º 9 —Å–ª–æ—Ç–æ–≤
function generateTicket9() {
  return Array.from({ length: 9 }, () => emojis[Math.floor(Math.random() * emojis.length)]);
}

function renderTicket9(ticket) {
  const container = document.getElementById("ticket-container-9");
  container.innerHTML = "";

  ticket.forEach((emoji, idx) => {
    const cell = document.createElement("div");
    cell.textContent = openedIndices9.includes(idx) ? emoji : "‚ùì";
    if (openedIndices9.includes(idx)) cell.classList.add("opened");

    cell.onclick = () => {
      if (openedIndices9.length >= 3 || openedIndices9.includes(idx)) return;
      openedIndices9.push(idx);
      cell.textContent = emoji;
      cell.classList.add("selected", "opened");
      if (openedIndices9.length === 3) checkWin9(ticket);
    };
    container.appendChild(cell);
  });
}

function checkWin9(ticket) {
  const openedEmojis = openedIndices9.map(i => ticket[i]);
  const allSame = openedEmojis.every(e => e === openedEmojis[0]);

  if (allSame) {
    const symbol = openedEmojis[0];
    const reward = emojiRewards[symbol] || 0;
    status.textContent = `üéâ (9 —Å–ª–æ—Ç–æ–≤) –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${reward} TON –∑–∞ ${symbol}!`;
  } else {
    status.textContent = "üòû (9 —Å–ª–æ—Ç–æ–≤) –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.";
  }

  const cells = document.querySelectorAll("#ticket-container-9 div");
  ticket.forEach((emoji, i) => {
    if (!openedIndices9.includes(i)) {
      cells[i].textContent = emoji;
      cells[i].classList.add("opened");
    }
  });
  openedIndices9 = ticket.map((_, i) => i);
}

async function buyTicket9() {
  if (!currentWalletAddress) {
    alert("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫!");
    return;
  }
  try {
    status.textContent = "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...";
    buyBtn9.disabled = true;
    buyAgainBtn9.disabled = true;

    await spendBalance(currentWalletAddress, 0.025); // —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞

    currentTicket9 = generateTicket9();
    openedIndices9 = [];
    status.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ 3 —è—á–µ–π–∫–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å";
    renderTicket9(currentTicket9);

    ticketModal9.style.display = "block";

    await fetchBalance(currentWalletAddress);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ (9 —Å–ª–æ—Ç–æ–≤):", err);
    alert(`–û—à–∏–±–∫–∞: ${err.message}`);
    status.textContent = "‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.";
  } finally {
    buyBtn9.disabled = false;
    buyAgainBtn9.disabled = false;
  }
}

// –ö–Ω–æ–ø–∫–∏ 9-—Å–ª–æ—Ç–æ–≤–æ–≥–æ –±–∏–ª–µ—Ç–∞
buyBtn9.onclick = buyTicket9;
buyAgainBtn9.onclick = buyTicket9;

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
closeTicketBtn9.onclick = () => ticketModal9.style.display = "none";
window.addEventListener("click", (e) => {
  if (e.target === ticketModal9) ticketModal9.style.display = "none";
});
