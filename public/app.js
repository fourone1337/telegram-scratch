// === –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã ===
const status = document.getElementById("status");
const SERVER_URL = "https://scratch-lottery.ru";
let currentWalletAddress = null;
let isTicketActive6 = false;
let isTicketActive9 = false;

// === 6 —Å–ª–æ—Ç–æ–≤ ===
const buyBtn = document.getElementById("buy");
const buyAgainBtn = document.getElementById("buy-again");
const closeTicketBtn = document.getElementById("close-ticket");
const ticketModal = document.getElementById("ticket-modal");
const ticketContainer = document.getElementById("ticket-container");

// === 9 —Å–ª–æ—Ç–æ–≤ ===
const buyBtn9 = document.getElementById("buy9");
const buyAgainBtn9 = document.getElementById("buy-again-9");
const closeTicketBtn9 = document.getElementById("close-ticket-9");
const ticketModal9 = document.getElementById("ticket-modal-9");
const ticketContainer9 = document.getElementById("ticket-container-9");

// === –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç ===
const freeTicketBtn = document.getElementById("free-ticket");

// === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
const emojis = ["üçí","‚≠êÔ∏è","üçã","üîî","7Ô∏è‚É£","üíé"];
const emojiRewards = { "üçí":5, "‚≠êÔ∏è":10, "üçã":15, "üîî":20, "7Ô∏è‚É£":25, "üíé":30 };
const state6 = { ticket: null, opened: [], boughtCount: 0, bonus: null, bonusOpened: false };
const state9 = { ticket: null, opened: [], boughtCount: 0, bonus: null, bonusOpened: false };
const bonusValues = [1, 1, 1, 2, 1, 4]; // –±–æ–ª—å—à–µ –µ–¥–∏–Ω–∏—Ü, —á—Ç–æ–±—ã —à–∞–Ω—Å –±–æ–Ω—É—Å–∞ –±—ã–ª –º–µ–Ω—å—à–µ

// === –ú–æ–¥–∞–ª–∫–∞ —Å —É—Å–ª–æ–≤–∏—è–º–∏ ===
const termsModal = document.getElementById("terms-modal");
const termsText = document.getElementById("terms-text");
const closeTermsBtn = document.getElementById("close-terms");
const acceptTermsBtn = document.getElementById("accept-terms");
const disclaimerBtn = document.getElementById("disclaimer-button");

// –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –ø–æ –∫–Ω–æ–ø–∫–µ
disclaimerBtn.onclick = async () => {
  try {
    // –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç —É—Å–ª–æ–≤–∏–π
    const response = await fetch("terms.txt");
    if (!response.ok) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Å–ª–æ–≤–∏—è");
    }
    const text = await response.text();
    termsText.textContent = text;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª–æ–≤–∏–π:", err);
    termsText.textContent = "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Å–ª–æ–≤–∏—è.";
  }
  termsModal.style.display = "block";
};

// –∑–∞–∫—Ä—ã—Ç—å –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É
closeTermsBtn.onclick = () => {
  termsModal.style.display = "none";
};

// –∑–∞–∫—Ä—ã—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª
acceptTermsBtn.onclick = () => {
  termsModal.style.display = "none";
};

// –∑–∞–∫—Ä—ã—Ç—å –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª–∫–∏
window.addEventListener("click", (e) => {
  if (e.target === termsModal) {
    termsModal.style.display = "none";
  }
});


// === –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∞ –∫–Ω–æ–ø–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ ===
function updateFreeTicketVisual(remaining) {
  if (remaining > 0) {
    freeTicketBtn.disabled = false;
    freeTicketBtn.classList.remove("no-free");
  } else {
    freeTicketBtn.disabled = true;
    freeTicketBtn.classList.add("no-free");
  }
}

// === –ë–∞–ª–∞–Ω—Å ===
function updateBalanceText(balance,isError=false){
  document.getElementById("balance-text").textContent = isError ? "–û—à–∏–±–∫–∞" : `${balance.toFixed(2)} TON`;
}
async function fetchBalance(address) {
  try {
    const res = await fetch(`${SERVER_URL}/api/balance/${address}`);
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞");

    updateBalanceText(data.balance);
    updateModalBalances(data.balance); // üî• –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞:", err);
    updateBalanceText(0, true);
    updateModalBalances(0, true);
  }
}
//==–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –º–æ–¥–∞–ª–∫–µ
function updateModalBalances(balance, isError = false) {
  const text = isError ? "–û—à–∏–±–∫–∞" : `${balance.toFixed(2)} TON`;

  const el6 = document.getElementById("modal-balance-6");
  if (el6) el6.textContent = text;

  const el9 = document.getElementById("modal-balance-9");
  if (el9) el9.textContent = text;
}

async function spendBalance(address,amount){
  const res = await fetch(`${SERVER_URL}/api/spend`,{
    method:"POST",
    headers:{ "Content-Type":"application/json" },
    body:JSON.stringify({address,amount})
  });
  const data = await res.json();
  if(!res.ok) throw new Error(data.error||"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è");
  return data;
}

// == –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä


async function sendWinToServer(address, emojis, reward) {
  try {
    const res = await fetch(`${SERVER_URL}/api/wins`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        address,
        emojis,
        reward,
        date: new Date().toISOString()
      })
    });
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤—ã–∏–≥—Ä—ã—à–∞");
    console.log("‚úÖ –í—ã–∏–≥—Ä—ã—à –∑–∞–ø–∏—Å–∞–Ω:", data);
    await fetchBalance(address); // –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã–∏–≥—Ä—ã—à–∞:", e);
  }
}

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ ===
async function checkFreeTickets(address) {
  try {
    const res = await fetch(`${SERVER_URL}/api/free-tickets/${address}`);
    const data = await res.json();
    console.log("–û—Ç–≤–µ—Ç –ø–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –±–∏–ª–µ—Ç–∞–º:", data); // –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞

    if (res.ok && typeof data.freeTickets === 'number') {
      updateFreeTicketVisual(data.freeTickets); // ‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ–º freeTickets
    } else {
      updateFreeTicketVisual(0);
    }
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤:", e);
    updateFreeTicketVisual(0);
  }
}
// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Ä–µ–Ω–¥–µ—Ä –±–∏–ª–µ—Ç–∞ ===
function generateTicket(slotCount){
  return Array.from({length:slotCount},()=>emojis[Math.floor(Math.random()*emojis.length)]);
}
function renderTicket(ticket, state, container, statusPrefix = "", isActive = true) {
  container.innerHTML = "";
  ticket.forEach((emoji, idx) => {
    const cell = document.createElement("div");
    cell.textContent = state.opened.includes(idx) ? emoji : "‚ùì";
    if (state.opened.includes(idx)) cell.classList.add("opened");

    cell.onclick = () => {
      if (!isActive) return; 
      if (state.opened.length >= 4 || state.opened.includes(idx)) return;
      state.opened.push(idx);
      cell.textContent = emoji;
      cell.classList.add("selected", "opened");
      if (state.opened.length === 4) checkWin(ticket, state, container, statusPrefix);
    };
    container.appendChild(cell);

  });

  // === –ë–æ–Ω—É—Å–Ω–∞—è —è—á–µ–π–∫–∞ (–î–û–ë–ê–í–õ–Ø–ï–ú –û–î–ò–ù –†–ê–ó) ===
  const bonusCell = document.createElement("div");
bonusCell.classList.add("bonus-cell");
bonusCell.textContent = state.bonusOpened ? `x${state.bonus}` : "üéÅ";
bonusCell.onclick = () => {
  if (state.bonusOpened) return;

  state.bonusOpened = true;
  bonusCell.textContent = `x${state.bonus}`;
  bonusCell.classList.add("opened-bonus");

  // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
  const allCells = container.querySelectorAll("div:not(.bonus-cell)");
  state.opened.forEach(i => {
    const c = allCells[i];
    c.textContent = ticket[i];
    c.classList.remove("pending");
    c.classList.add("opened");
  });

  // üëâ –¢–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ª—è
  allCells.forEach((cell, i) => {
    if (!state.opened.includes(i)) {
      cell.textContent = ticket[i];
      cell.classList.add("opened");
    }
  });

  // –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ 4 ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
  if (state.opened.length === 4) {
    checkWin(ticket, state, container, statusPrefix);
  }
};

// ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º renderTicket
container.appendChild(bonusCell);
} // üî• <-- –≤–æ—Ç —ç—Ç–∞ —Å–∫–æ–±–∫–∞ –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å renderTicket

function checkWin(ticket, state, container, statusPrefix = "") {
  console.log("üéØ checkWin –≤—ã–∑–≤–∞–Ω! –û—Ç–∫—Ä—ã—Ç—ã–µ –∏–Ω–¥–µ–∫—Å—ã:", state.opened);

  const openedEmojis = state.opened.map(i => ticket[i]);
  console.log("üßê –û—Ç–∫—Ä—ã—Ç—ã–µ —ç–º–æ–¥–∑–∏:", openedEmojis);

  // –ü–æ–¥—Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –∫–∞–∫–∏—Ö —ç–º–æ–¥–∑–∏
  const counts = {};
  for (let emoji of openedEmojis) {
    counts[emoji] = (counts[emoji] || 0) + 1;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
  let winEmoji = null;
  for (let [emoji, count] of Object.entries(counts)) {
    if (count >= 3) {
      winEmoji = emoji;
      break;
    }
  }

  if (winEmoji) {
    let reward = emojiRewards[winEmoji] || 0;

    // üéÅ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å
    if (state.bonusOpened && state.bonus && state.bonus > 1) {
      reward *= state.bonus;
      status.textContent = `${statusPrefix}üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${reward} TON –∑–∞ ${winEmoji} (–ë–æ–Ω—É—Å x${state.bonus})!`;
    } else {
      status.textContent = `${statusPrefix}üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${reward} TON –∑–∞ ${winEmoji}!`;
    }

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", {
      address: currentWalletAddress,
      emojis: openedEmojis,
      reward: reward
    });
    sendWinToServer(currentWalletAddress, openedEmojis, reward);
  } else {
    status.textContent = `${statusPrefix}üòû –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.`;
  }

  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —è—á–µ–π–∫–∏
  if (state.bonusOpened) {
    container.querySelectorAll("div").forEach((cell, i) => {
      if (!state.opened.includes(i) && !cell.classList.contains("bonus-cell")) {
        cell.textContent = ticket[i];
        cell.classList.add("opened");
      }
    });
  } else {
    console.log("‚ö†Ô∏è –ë–æ–Ω—É—Å –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã—Ç, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è.");
  }
}

// === –õ–æ–≥–∏–∫–∞ –º–æ–¥–∞–ª–∫–∏ 6 —Å–ª–æ—Ç–æ–≤ ===
buyBtn.onclick = () => {
  isTicketActive6 = false; // üö´ –ø–æ–∫–∞ –Ω–µ –∫—É–ø–ª–µ–Ω
  state6.ticket = generateTicket(6);
  state6.opened = [];
  renderTicket(state6.ticket, state6, ticketContainer, "", false); // –ø–µ—Ä–µ–¥–∞–µ–º false
  
  ticketModal.style.display = "block";
  buyAgainBtn.textContent = state6.boughtCount === 0 ? "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç" : "–ö—É–ø–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω";
};
async function handleBuyInModal6(){
  if(!currentWalletAddress){ showCustomAlert("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫!"); return; }
  try{
    status.textContent="‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...";
    buyAgainBtn.disabled=true;
    await spendBalance(currentWalletAddress,0.05);
    state6.ticket = generateTicket(6);
    state6.opened = [];
    state6.boughtCount++;
    //===–ë–æ–Ω—É—Å
    state6.bonus = bonusValues[Math.floor(Math.random() * bonusValues.length)];
    state6.bonusOpened = false;

    status.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ 4 —è—á–µ–π–∫–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å";
    renderTicket(state6.ticket, state6, ticketContainer, "", true);
    //===

    isTicketActive6 = true; // ‚úÖ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∫–ª–∏–∫–∞—Ç—å
    renderTicket(state6.ticket, state6, ticketContainer, "", true);
    buyAgainBtn.textContent = state6.boughtCount === 0 ? "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç" : "–ö—É–ø–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω";
    await fetchBalance(currentWalletAddress);
  }catch(err){
    console.error("–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:",err);
    showCustomAlert(`–û—à–∏–±–∫–∞: ${err.message}`);
    status.textContent="‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.";
  }finally{
    buyAgainBtn.disabled=false;
  }
}
buyAgainBtn.onclick = handleBuyInModal6;
closeTicketBtn.onclick = ()=>ticketModal.style.display="none";

// === –õ–æ–≥–∏–∫–∞ –º–æ–¥–∞–ª–∫–∏ 9 —Å–ª–æ—Ç–æ–≤ ===
buyBtn9.onclick = () => {
  isTicketActive9 = false; // üö´ –ø–æ–∫–∞ –Ω–µ –∫—É–ø–ª–µ–Ω
  state9.ticket = generateTicket(9);
  state9.opened = [];
  renderTicket(state9.ticket, state9, ticketContainer9, "(9 —Å–ª–æ—Ç–æ–≤) ", false);
  
  ticketModal9.style.display = "block";
  buyAgainBtn9.textContent = state9.boughtCount === 0 ? "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç" : "–ö—É–ø–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω";
};
async function handleBuyInModal9(){
  if(!currentWalletAddress){ showCustomAlert("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫!"); return; }
  try{
    status.textContent="‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...";
    buyAgainBtn9.disabled=true;
    await spendBalance(currentWalletAddress,0.1);
    state9.ticket = generateTicket(9);
    state9.opened = [];
    state9.boughtCount++;
    isTicketActive9 = true; // ‚úÖ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∫–ª–∏–∫–∞—Ç—å
    renderTicket(state9.ticket, state9, ticketContainer9, "(9 —Å–ª–æ—Ç–æ–≤) ", true);
    buyAgainBtn9.textContent = state9.boughtCount === 0 ? "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç" : "–ö—É–ø–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω";
    await fetchBalance(currentWalletAddress);
  }catch(err){
    console.error("–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:",err);
    showCustomAlert(`–û—à–∏–±–∫–∞: ${err.message}`);
    status.textContent="‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.";
  }finally{
    buyAgainBtn9.disabled=false;
  }
}
buyAgainBtn9.onclick = handleBuyInModal9;
closeTicketBtn9.onclick = ()=>ticketModal9.style.display="none";

// === –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç ===
freeTicketBtn.onclick = async () => {
  if(!currentWalletAddress){ showCustomAlert("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫!"); return; }
  try{
    status.textContent="‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –±–∏–ª–µ—Ç—ã...";
    freeTicketBtn.disabled=true;
    const res = await fetch(`${SERVER_URL}/api/use-free-ticket`,{
      method:"POST",
      headers:{ "Content-Type":"application/json" },
      body: JSON.stringify({address:currentWalletAddress})
    });
    const data = await res.json();
    if(!res.ok){
      updateFreeTicketVisual(0);
      showCustomAlert(`‚ùå ${data.error || "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤."}`);
      status.textContent="‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.";
    }else{
      state6.ticket = generateTicket(6);
      state6.opened = [];
      state6.boughtCount++;
      state6.bonus = bonusValues[Math.floor(Math.random() * bonusValues.length)];
      state6.bonusOpened = false;
    renderTicket(state6.ticket, state6, ticketContainer, "", true);
      ticketModal.style.display = "block";
      status.textContent="–í—ã–±–µ—Ä–∏—Ç–µ 3 —è—á–µ–π–∫–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å";
      updateFreeTicketVisual(data.remaining);
      showCustomAlert(`‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω! –û—Å—Ç–∞–ª–æ—Å—å: ${data.remaining}`);
    }
  }catch(err){
    console.error("–û—à–∏–±–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞:",err);
    showCustomAlert(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
    status.textContent="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞.";
  }finally{
    freeTicketBtn.disabled=false;
  }
};

// === –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫ –∫–ª–∏–∫–æ–º –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
window.addEventListener("click",e=>{
  if(e.target===ticketModal) ticketModal.style.display="none";
  if(e.target===ticketModal9) ticketModal9.style.display="none";
});

// === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª–æ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è/–≤—ã–≤–æ–¥–∞ ===
function setupModal(modalId,openBtnId,closeBtnId,inputId,okBtnId,onSubmit){
  const modal=document.getElementById(modalId);
  const openBtn=document.getElementById(openBtnId);
  const closeBtn=document.getElementById(closeBtnId);
  const input=document.getElementById(inputId);
  const okBtn=document.getElementById(okBtnId);

  openBtn.onclick=()=>{
    if(!currentWalletAddress){showCustomAlert("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫!");return;}
    input.value="";
    modal.style.display="block";
  };
  closeBtn.onclick=()=>modal.style.display="none";
  okBtn.onclick=()=>{
    const val=parseFloat(input.value);
    if(isNaN(val)||val<=0){showCustomAlert("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞");return;}
    onSubmit(val,modal);
  };
  window.addEventListener("click",(e)=>{ if(e.target===modal) modal.style.display="none"; });
}

// –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
setupModal("topup-modal","topup","close-topup","topup-input","topup-ok",async(amount,modal)=>{
  try{
    status.textContent="‚è≥ –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥...";
    await tonConnectUI.sendTransaction({
      validUntil:Math.floor(Date.now()/1000)+300,
      messages:[{address:"UQDYpGx-Y95M0F-ETSXFwC6YeuJY31qaqetPlkmYDEcKyX8g",amount:(amount*1e9).toString()}]
    });
    await verifyTopup(currentWalletAddress,amount);
    modal.style.display="none";
  }catch(err){
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",err);
    showCustomAlert("‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å");
  }
});

// –í—ã–≤–æ–¥
setupModal("withdraw-modal","withdraw","close-withdraw","withdraw-input","withdraw-ok",async(amount,modal)=>{
  try{
    const res=await fetch(`${SERVER_URL}/api/request-withdraw`,{
      method:"POST",
      headers:{ "Content-Type":"application/json" },
      body:JSON.stringify({address:currentWalletAddress,amount})
    });
    const data=await res.json();
    if(data.success){
      showCustomAlert("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–∏–Ω—è—Ç–∞");
      modal.style.display="none";
    }else{
      showCustomAlert("‚ùå –û—à–∏–±–∫–∞: "+data.error);
    }
  }catch(err){
    showCustomAlert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ: "+err.message);
  }
});

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ===
async function verifyTopup(address,amount){
  status.textContent="‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞...";
  const res=await fetch(`${SERVER_URL}/api/verify-topup/${address}/${amount}`);
  const data=await res.json();
  if(data.confirmed){
    await fetchBalance(address);
    status.textContent=`‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${amount} TON`;
  }else{
    status.textContent="‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω";
  }
}

// === –ö–∞—Å—Ç–æ–º–Ω—ã–π –∞–ª–µ—Ä—Ç ===
const customAlert=document.getElementById('custom-alert');
const customAlertText=document.getElementById('custom-alert-text');
const customAlertOk=document.getElementById('custom-alert-ok');
const customAlertClose=document.getElementById('close-custom-alert');
function showCustomAlert(text){ customAlertText.textContent=text; customAlert.style.display='block'; }
customAlertOk.onclick=()=>customAlert.style.display='none';
customAlertClose.onclick=()=>customAlert.style.display='none';
window.addEventListener('click',(e)=>{ if(e.target===customAlert)customAlert.style.display='none'; });

// === TonConnect –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã ===
const tonConnectUI=new TON_CONNECT_UI.TonConnectUI({
  manifestUrl:'https://telegram-scratch-two.vercel.app/tonconnect-manifest.json',
  buttonRootId:'ton-connect'
});
tonConnectUI.onStatusChange(wallet=>{
  const raw=wallet?.account?.address||"";
  let friendly=null;
  if(raw){
    try{ friendly=new TonWeb.utils.Address(raw).toString(true,true,true); }
    catch{ try{ friendly=new TonWeb.utils.Address(raw).toString(true,false,true); }catch(e){ console.error("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞:",e); } }
  }
  const enabled=!!friendly;
  buyBtn.disabled=!enabled;
  buyBtn9.disabled=!enabled;
  document.getElementById("topup").disabled=!enabled;
  document.getElementById("withdraw").disabled=!enabled;

  currentWalletAddress=friendly||null;
  status.textContent=enabled?"–ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!":"–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.";

  if(friendly){
    fetchBalance(friendly);
    checkFreeTickets(friendly); // üî• –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –±–∏–ª–µ—Ç—ã
  }
});

// === –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ ===
document.getElementById("copy-ref").onclick=()=>{
  if(!currentWalletAddress){ showCustomAlert("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫!"); return; }
  const link=`${window.location.origin}?ref=${currentWalletAddress}`;
  if(navigator.clipboard && window.isSecureContext){
    navigator.clipboard.writeText(link).then(()=>{
      showCustomAlert("‚úÖ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!\n"+link);
    }).catch(err=>{
      console.warn("‚ö†Ô∏è Clipboard API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:",err);
      prompt("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é:",link);
    });
  }else{
    prompt("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é:",link);
  }
};

// === –ü–∞—Ä—Å–∏–Ω–≥ ref –∏–∑ URL ===
const params=new URLSearchParams(window.location.search);
const refFromLink=params.get('ref');
if(refFromLink){ localStorage.setItem('referrer',refFromLink); console.log("‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª:",refFromLink); }
