const buyBtn = document.getElementById("buy");
const status = document.getElementById("status");
const walletDisplay = document.getElementById("wallet-address");

const emojis = ["üçí", "‚≠êÔ∏è", "üçã", "üîî", "7Ô∏è‚É£", "üíé"];
const emojiRewards = {
  "üçí": 0.1,
  "‚≠êÔ∏è": 0.1,
  "üçã": 0.1,
  "üîî": 0.1,
  "7Ô∏è‚É£": 0.1,
  "üíé": 0.1
};

const history = [];
let currentTicket = null;
let openedIndices = [];
let currentWalletAddress = null;
const SERVER_URL = "https://telegram-scratch.onrender.com";

const tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
  manifestUrl: 'https://telegram-scratch-two.vercel.app/tonconnect-manifest.json',
  buttonRootId: 'ton-connect'
});

tonConnectUI.onStatusChange(wallet => {
  const fullAddress = wallet?.account?.address || "";
  const shortAddress = fullAddress
    ? `${fullAddress.slice(0, 4)}...${fullAddress.slice(-3)}`
    : "üî¥ –ö–æ—à–µ–ª—ë–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω.";

  currentWalletAddress = fullAddress || null;

  walletDisplay.textContent = fullAddress ? `üü¢ –ö–æ—à–µ–ª—ë–∫: ${shortAddress}` : shortAddress;
  buyBtn.disabled = !fullAddress;
  status.textContent = fullAddress
    ? "–ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!"
    : "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.";

  if (fullAddress) fetchBalance(fullAddress);
});

buyBtn.onclick = async () => {
  if (!currentWalletAddress) {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ TON-–∫–æ—à–µ–ª—ë–∫ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –±–∏–ª–µ—Ç–∞.");
    return;
  }

  try {
    buyBtn.disabled = true;
    status.textContent = "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...";

    await spendBalance(currentWalletAddress, 1); // —Å–ø–∏—Å–∞–Ω–∏–µ 1 TON

    currentTicket = generateTicket();
    openedIndices = [];
    status.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ 3 —è—á–µ–π–∫–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å";
    renderTicket(currentTicket);
    await fetchBalance(currentWalletAddress); // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:", err);
    alert(`–û—à–∏–±–∫–∞: ${err.message}`);
    status.textContent = "‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
  } finally {
    buyBtn.disabled = false;
  }
};

async function spendBalance(address, amount) {
  const res = await fetch(`${SERVER_URL}/api/spend`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ address, amount })
  });

  const data = await res.json();
  if (!res.ok) throw new Error(data.error || "–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è");
  return data;
}

async function fetchBalance(address) {
  try {
    const res = await fetch(`${SERVER_URL}/api/balance/${address}`);
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞");
    const balanceDiv = document.getElementById("balance-display");
    balanceDiv.textContent = `üí∞ –ë–∞–ª–∞–Ω—Å: ${data.balance.toFixed(2)} TON`;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞:", err);
    const balanceDiv = document.getElementById("balance-display");
    balanceDiv.textContent = "üí∞ –ë–∞–ª–∞–Ω—Å: –æ—à–∏–±–∫–∞";
  }
}

function generateTicket() {
  const ticket = [];
  for (let i = 0; i < 6; i++) {
    const emoji = emojis[Math.floor(Math.random() * emojis.length)];
    ticket.push(emoji);
  }
  return ticket;
}

function renderTicket(ticket) {
  const containerId = "ticket-container";
  let container = document.getElementById(containerId);

  if (!container) {
    container = document.createElement("div");
    container.id = containerId;
    container.style.display = "grid";
    container.style.gridTemplateColumns = "repeat(3, 60px)";
    container.style.gridTemplateRows = "repeat(2, 60px)";
    container.style.gridGap = "10px";
    container.style.justifyContent = "center";
    container.style.margin = "20px 0";
    document.body.insertBefore(container, status);
  }
  container.innerHTML = "";

  ticket.forEach((emoji, idx) => {
    const cell = document.createElement("div");
    cell.style.width = "60px";
    cell.style.height = "60px";
    cell.style.backgroundColor = "rgba(136, 136, 136, 0.1)";
    cell.style.borderRadius = "8px";
    cell.style.display = "flex";
    cell.style.alignItems = "center";
    cell.style.justifyContent = "center";
    cell.style.fontSize = "36px";
    cell.style.cursor = "pointer";
    cell.style.userSelect = "none";
    cell.textContent = openedIndices.includes(idx) ? emoji : "‚ùì";

    cell.onclick = () => {
      if (openedIndices.length >= 3 || openedIndices.includes(idx)) return;
      openedIndices.push(idx);
      cell.textContent = emoji;
      if (openedIndices.length === 3) checkWin(ticket);
    };

    container.appendChild(cell);
  });
}

function checkWin(ticket) {
  const openedEmojis = openedIndices.map(i => ticket[i]);
  const allSame = openedEmojis.every(e => e === openedEmojis[0]);

  if (allSame) {
    const symbol = openedEmojis[0];
    const reward = emojiRewards[symbol] || 0;
    status.textContent = `üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${reward} TON –∑–∞ ${symbol}!`;

    const address = currentWalletAddress;
    const emojis = openedEmojis.join('');
    if (address) {
      sendWinToServer(address, emojis, reward);
      fetchWinners();
      window.addEventListener("focus", fetchWinners);
    }
  } else {
    status.textContent = "üòû –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë.";
  }

  history.push({ ticket, opened: [...openedIndices], winner: allSame, openedEmojis });
  renderHistory();
}

function renderHistory() {
  let historyDiv = document.getElementById("history");
  if (!historyDiv) {
    historyDiv = document.createElement("div");
    historyDiv.id = "history";
    historyDiv.style.marginTop = "30px";
    historyDiv.style.textAlign = "left";
    document.body.appendChild(historyDiv);
  }

  if (history.length === 0) {
    historyDiv.innerHTML = "<b>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</b>";
    return;
  }

  const listItems = history.map((h, idx) => {
    const statusText = h.winner ? "–í—ã–∏–≥—Ä—ã—à" : "–ü—Ä–æ–∏–≥—Ä—ã—à";
    const color = h.winner ? "green" : "red";
    const openedStr = h.openedEmojis.join(", ");
    return `<div style="color:${color}; margin-bottom:6px;">
      <b>–ò–≥—Ä–∞ #${idx + 1}:</b> ${statusText} ‚Äî –û—Ç–∫—Ä—ã—Ç—ã–µ: ${openedStr}
    </div>`;
  });

  historyDiv.innerHTML = "<h3>–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä</h3>" + listItems.join("");
}

async function sendWinToServer(address, emojis, reward) {
  try {
    await fetch(`${SERVER_URL}/api/wins`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ address, emojis, reward, date: new Date().toISOString() })
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–±–µ–¥—ã:", err);
  }
}

async function fetchWinners() {
  try {
    const res = await fetch(`${SERVER_URL}/api/wins`);
    const data = await res.json();
    renderWinners(data);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:", err);
  }
}

function renderWinners(data) {
  let winnersDiv = document.getElementById("winners");
  if (!winnersDiv) {
    winnersDiv = document.createElement("div");
    winnersDiv.id = "winners";
    winnersDiv.style.marginTop = "40px";
    winnersDiv.innerHTML = "<h3>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏</h3>";
    document.body.appendChild(winnersDiv);
  }

  if (!data.length) {
    winnersDiv.innerHTML += "<div>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</div>";
    return;
  }

  const list = data.map(win => {
    const shortAddr = `${win.address.slice(0, 4)}...${win.address.slice(-3)}`;
    const rewardInfo = win.reward ? ` ‚Äî üí∞ ${win.reward} TON` : "";
    return `<div>üéâ ${shortAddr} ‚Äî ${win.emojis}${rewardInfo} (${new Date(win.date).toLocaleString()})</div>`;
  });

  winnersDiv.innerHTML = "<h3>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏</h3>" + list.join("");
}

fetchWinners();
